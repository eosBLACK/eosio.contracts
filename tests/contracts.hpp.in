#pragma once
#include <eosio/testing/tester.hpp>

namespace eosio { namespace testing {

struct contracts {
   static std::vector<uint8_t> system_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.wasm"); }
   static std::string          system_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.wast"); }
   static std::vector<char>    system_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.system/eosio.system.abi"); }
   static std::vector<uint8_t> token_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.wasm"); }
   static std::string          token_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.wast"); }
   static std::vector<char>    token_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.token/eosio.token.abi"); }
   static std::vector<uint8_t> msig_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.wasm"); }
   static std::string          msig_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.wast"); }
   static std::vector<char>    msig_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.msig/eosio.msig.abi"); }
   static std::vector<uint8_t> wrap_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.wasm"); }
   static std::string          wrap_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.wast"); }
   static std::vector<char>    wrap_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.wrap/eosio.wrap.abi"); }
   static std::vector<uint8_t> bios_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.wasm"); }
   static std::string          bios_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.wast"); }
   static std::vector<char>    bios_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eosio.bios/eosio.bios.abi"); }
   static std::vector<uint8_t> member_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eb.member/eb.member.wasm"); }
   static std::string          member_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eb.member/eb.member.wast"); }
   static std::vector<char>    member_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eb.member/eb.member.abi"); }
   static std::vector<uint8_t> faucet_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eb.faucet/eb.faucet.wasm"); }
   static std::string          faucet_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eb.faucet/eb.faucet.wast"); }
   static std::vector<char>    faucet_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eb.faucet/eb.faucet.abi"); }   
   static std::vector<uint8_t> factory_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eb.factory/eb.factory.wasm"); }
   static std::string          factory_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eb.factory/eb.factory.wast"); }
   static std::vector<char>    factory_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eb.factory/eb.factory.abi"); }  
   static std::vector<uint8_t> cryptob_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eb.cryptob/eb.cryptob.wasm"); }
   static std::string          cryptob_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eb.cryptob/eb.cryptob.wast"); }
   static std::vector<char>    cryptob_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eb.cryptob/eb.cryptob.abi"); }    
   static std::vector<uint8_t> cryptor_wasm() { return read_wasm("${CMAKE_BINARY_DIR}/../contracts/eb.cryptor/eb.cryptor.wasm"); }
   static std::string          cryptor_wast() { return read_wast("${CMAKE_BINARY_DIR}/../contracts/eb.cryptor/eb.cryptor.wast"); }
   static std::vector<char>    cryptor_abi() { return read_abi("${CMAKE_BINARY_DIR}/../contracts/eb.cryptor/eb.cryptor.abi"); }   

   struct util {
      static std::vector<uint8_t> test_api_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/test_api.wasm"); }
      static std::vector<uint8_t> exchange_wasm() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/exchange.wasm"); }
      static std::vector<uint8_t> system_wasm_old() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.old/eosio.system.wasm"); }
      static std::vector<char>    system_abi_old() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.system.old/eosio.system.abi"); }
      static std::vector<uint8_t> msig_wasm_old() { return read_wasm("${CMAKE_SOURCE_DIR}/test_contracts/eosio.msig.old/eosio.msig.wasm"); }
      static std::vector<char>    msig_abi_old() { return read_abi("${CMAKE_SOURCE_DIR}/test_contracts/eosio.msig.old/eosio.msig.abi"); }
   };
};
}} //ns eosio::testing
